buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

project.version = "0.1.0"
sourceCompatibility = '14'
targetCompatibility = '14'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile('org.springframework.boot:spring-boot-starter-jetty')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile('org.springframework.session:spring-session-core')
    compile('org.springframework.security:spring-security-messaging')
    compile('org.springframework:spring-messaging')
    compile('io.openvidu:openvidu-java-client:2.13.0')
    compile('org.springdoc:springdoc-openapi-ui:1.3.7')
    compile('org.springdoc:springdoc-openapi-security:1.3.7')

    runtime('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: "org.junit.vintage:junit-vintage-engine"
    }
    testImplementation('org.springframework.security:spring-security-test')
}

task copyJar(type: Copy) {
    dependsOn   bootJar
    from        "${project.buildDir}/libs/${jar.archiveBaseName.get()}-${project.version}.jar"
    into        "${project.buildDir}/docker"
}

task copyDockerfile(type: Copy) {
    dependsOn   copyJar
    from        "${project.projectDir}/Dockerfile"
    into        "${project.buildDir}/docker"
}

task buildImage(type: DockerBuildImage) {
    dependsOn   copyDockerfile
    inputDir = project.file("${project.buildDir}/docker")
    dockerFile = project.file("${project.buildDir}/docker/Dockerfile")
    files project.file("${project.buildDir}/docker")
    buildArgs = ['JAR_FILE' : "${jar.archiveBaseName.get()}-${project.version}.jar"]
    images.add("aukhatov/vrooms:${project.version}")
}

docker {
    registryCredentials {
        url = 'https://index.docker.io/v1/'
        username = System.getenv('DOCKER_USER')
        password = System.getenv('DOCKER_PASSWORD')
    }
}

task pushImage(type: DockerPushImage) {
    dependsOn   buildImage
    images.add("aukhatov/vrooms:${project.version}")
}

task pushImageWithBuildNumber(type: DockerPushImage) {
    dependsOn   buildImage
    images.add("aukhatov/vrooms:${project.version}-b" + System.getenv('TRAVIS_BUILD_NUMBER'))
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}
